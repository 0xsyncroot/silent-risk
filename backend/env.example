# ============================================
# Silent Risk Backend - Environment Configuration
# ============================================

# ============ SERVICE ============

APP_NAME=Silent Risk Backend
APP_VERSION=1.0.0
ENVIRONMENT=development
DEBUG=true
HOST=0.0.0.0
PORT=8000
LOG_LEVEL=INFO

# ============ KAFKA ============
# Message broker for async task processing between backend and worker

KAFKA_BOOTSTRAP_SERVERS=localhost:9092
KAFKA_TOPIC_RISK_REQUESTS=risk-analysis-requests
KAFKA_TOPIC_RISK_RESULTS=risk-analysis-results

# Strategy validation topics
KAFKA_TOPIC_STRATEGY_REQUESTS=strategy-validation-requests
KAFKA_TOPIC_STRATEGY_RESULTS=strategy-validation-results

# ============ REDIS CACHE ============
# Cache for analysis results, task status, and passport claim data

REDIS_URL=redis://localhost:6379/0
ANALYSIS_CACHE_TTL=1800  # 30 minutes (in seconds)

# ============ MONGODB ============
# Persistent storage for analytics, statistics, and historical data

MONGODB_URL=mongodb://localhost:27017
MONGODB_DB_NAME=silent_risk
MONGODB_MAX_POOL_SIZE=10
MONGODB_MIN_POOL_SIZE=1

# ============ API ============

API_V1_PREFIX=/api/v1
CORS_ORIGINS=["http://localhost:3000","http://localhost:3001"]
RATE_LIMIT_PER_MINUTE=60

# ============ SECURITY ============

SECRET_KEY=dev-secret-key-change-in-production-use-openssl-rand-hex-32

# ============================================
# ARCHITECTURE NOTES
# ============================================
# 
# Backend is a STATELESS API gateway that:
#   1. Receives requests from frontend
#   2. Publishes tasks to Kafka
#   3. Caches results in Redis
#   4. Returns cached data to frontend
#
# Backend does NOT:
#   - Store data in database (no MongoDB needed)
#   - Process blockchain data (worker's job)
#   - Calculate risk scores (worker's job)
#   - Generate FHE encryption (worker's job)
#
# Data flow:
#   Frontend → Backend → Kafka → Worker
#   Worker → Redis → Backend → Frontend
#
# ============================================

# ============================================
# QUICK START
# ============================================
# 1. Copy this file:
#    cp env.example .env
#
# 2. Start dependencies:
#    docker-compose up -d
#    (Starts Kafka, Zookeeper, Redis)
#
# 3. Verify services:
#    docker-compose ps
#
# 4. Create virtual environment:
#    python3 -m venv .venv
#    source .venv/bin/activate
#    pip install -r requirements.txt
#
# 5. Start backend:
#    uvicorn app.main:app --reload
#    or
#    make dev
#
# 6. Check health:
#    curl http://localhost:8000/health
#
# 7. View API docs:
#    open http://localhost:8000/docs
# ============================================

# ============================================
# PRODUCTION CHECKLIST
# ============================================
# [ ] Change SECRET_KEY to random 32-byte hex
# [ ] Set DEBUG=false
# [ ] Set ENVIRONMENT=production
# [ ] Update CORS_ORIGINS with actual domain
# [ ] Configure proper logging (LOG_LEVEL=WARNING)
# [ ] Use managed Kafka (AWS MSK, Confluent Cloud)
# [ ] Use managed Redis (AWS ElastiCache, Redis Cloud)
# [ ] Enable rate limiting per IP
# [ ] Set up monitoring (Prometheus, Grafana)
# [ ] Configure SSL/TLS for Redis connection
# [ ] Set up log aggregation (CloudWatch, DataDog)
# ============================================
