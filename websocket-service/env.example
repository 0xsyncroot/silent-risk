# ============================================
# WebSocket Service - Environment Configuration
# ============================================

# ============ SERVICE ============

APP_NAME=Silent Risk WebSocket Service
HOST=0.0.0.0
PORT=8001
DEBUG=true
LOG_LEVEL=INFO

# ============ REDIS ============

# Redis connection URL
REDIS_URL=redis://localhost:6379/0

# Redis pub/sub channel for task status updates
# Backend/Worker publishes to this channel
REDIS_PUBSUB_CHANNEL=task_status_updates

# ============ CORS ============

# Allowed origins (comma-separated)
CORS_ORIGINS=["http://localhost:3000","http://localhost:3001"]

# ============ WEBSOCKET ============

# Maximum concurrent WebSocket connections
WS_MAX_CONNECTIONS=1000

# WebSocket heartbeat interval (seconds)
WS_HEARTBEAT_INTERVAL=30

# ============================================
# ARCHITECTURE NOTES
# ============================================
#
# WebSocket Service Architecture:
#
#   Backend/Worker → Redis Pub/Sub → WebSocket Service → Clients
#
# 1. Backend/Worker publishes task status updates to Redis channel
# 2. WebSocket service subscribes to Redis channel
# 3. On update, WebSocket service broadcasts to connected clients
# 4. Clients receive real-time updates
#
# Benefits:
#   - Separate scaling (WebSocket can scale independently)
#   - Easy deployment (standalone service)
#   - Clean separation of concerns
#   - Backend doesn't need to manage WebSocket connections
#
# ============================================

# ============================================
# QUICK START
# ============================================
# 1. Copy this file:
#    cp env.example .env
#
# 2. Ensure Redis is running:
#    docker-compose up -d redis
#
# 3. Install dependencies:
#    pip install -r requirements.txt
#
# 4. Run service:
#    python -m app.main
#    or
#    uvicorn app.main:app --reload --port 8001
#
# 5. Test WebSocket:
#    wscat -c ws://localhost:8001/ws
#
# 6. Check stats:
#    curl http://localhost:8001/ws/stats
# ============================================

